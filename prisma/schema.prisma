generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model boards {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(75)
  owner          Int
  users          users            @relation(fields: [owner], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_boards")
  boards_users   boards_users[]
  columns_boards columns_boards[]

  @@index([owner], map: "fk_boards")
}

model boards_users {
  id       Int    @id @default(autoincrement())
  board_id Int
  user_id  Int
  boards   boards @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_boards_users_board_id")
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_boards_users_user_id")

  @@index([board_id], map: "fk_boards_users_board_id")
  @@index([user_id], map: "fk_boards_users_user_id")
}

model columns {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(100)
  columns_boards columns_boards[]
  columns_tasks  columns_tasks[]
}

model columns_boards {
  id        Int     @id @default(autoincrement())
  board_id  Int
  column_id Int
  boards    boards  @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_columns_boards_board_id")
  columns   columns @relation(fields: [column_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_columns_boards_column_id")

  @@index([board_id], map: "fk_columns_boards_board_id")
  @@index([column_id], map: "fk_columns_boards_column_id")
}

model columns_tasks {
  id        Int     @id @default(autoincrement())
  task_id   Int
  column_id Int
  columns   columns @relation(fields: [column_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_columns_tasks_column_id")
  tasks     tasks   @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_columns_tasks_task_id")

  @@index([column_id], map: "fk_columns_tasks_column_id")
  @@index([task_id], map: "fk_columns_tasks_task_id")
}

model states {
  id    Int     @id @default(autoincrement())
  state String  @db.VarChar(100)
  tasks tasks[]
}

model tasks {
  id            Int             @id @default(autoincrement())
  content       String          @db.VarChar(100)
  state_id      Int
  user_id       Int?
  columns_tasks columns_tasks[]
  users         users?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tasks")
  states        states          @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tasks_state")

  @@index([user_id], map: "fk_tasks")
  @@index([state_id], map: "fk_tasks_state")
}

model users {
  id              Int            @id @default(autoincrement())
  name            String         @db.VarChar(100)
  email           String         @db.VarChar(100)
  profile_picture String?        @default("profile_deffault.svg") @db.VarChar(100)
  password        String         @db.VarChar(255)
  boards          boards[]
  boards_users    boards_users[]
  tasks           tasks[]
}
