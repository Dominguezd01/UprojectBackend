generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BOARDS {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(75)
  owner          Int
  USERS          USERS            @relation(fields: [owner], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_boards")
  BOARDS_USERS   BOARDS_USERS[]
  COLUMNS_BOARDS COLUMNS_BOARDS[]

  @@index([owner], map: "fk_boards")
}

model BOARDS_USERS {
  id       Int    @id @default(autoincrement())
  board_id Int
  user_id  Int
  BOARDS   BOARDS @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_boards_users_board_id")
  USERS    USERS  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_boards_users_user_id")

  @@index([board_id], map: "fk_boards_users_board_id")
  @@index([user_id], map: "fk_boards_users_user_id")
}

model COLUMNS {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(100)
  COLUMNS_BOARDS COLUMNS_BOARDS[]
  COLUMNS_TASKS  COLUMNS_TASKS[]
}

model COLUMNS_BOARDS {
  id        Int     @id @default(autoincrement())
  board_id  Int
  column_id Int
  BOARDS    BOARDS  @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_columns_boards_board_id")
  COLUMNS   COLUMNS @relation(fields: [column_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_columns_boards_column_id")

  @@index([board_id], map: "fk_columns_boards_board_id")
  @@index([column_id], map: "fk_columns_boards_column_id")
}

model COLUMNS_TASKS {
  id        Int     @id @default(autoincrement())
  task_id   Int
  column_id Int
  COLUMNS   COLUMNS @relation(fields: [column_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_columns_tasks_column_id")
  TASKS     TASKS   @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_columns_tasks_task_id")

  @@index([column_id], map: "fk_columns_tasks_column_id")
  @@index([task_id], map: "fk_columns_tasks_task_id")
}

model STATES {
  id    Int     @id @default(autoincrement())
  state String  @db.VarChar(100)
  TASKS TASKS[]
}

model TASKS {
  id            Int             @id @default(autoincrement())
  content       String          @db.VarChar(100)
  state_id      Int
  user_id       Int?
  COLUMNS_TASKS COLUMNS_TASKS[]
  USERS         USERS?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tasks")
  STATES        STATES          @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tasks_state")

  @@index([user_id], map: "fk_tasks")
  @@index([state_id], map: "fk_tasks_state")
}

model USERS {
  id              Int            @id @default(autoincrement())
  name            String         @db.VarChar(100)
  email           String         @db.VarChar(100)
  profile_picture String?        @db.VarChar(100)
  BOARDS          BOARDS[]
  BOARDS_USERS    BOARDS_USERS[]
  TASKS           TASKS[]
}
