generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model boards {
  id             Int              @id(map: "PK_boards")
  name           String           @db.VarChar(75)
  owner          String           @db.VarChar(36)
  users          users            @relation(fields: [owner], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_board_owner")
  boards_users   boards_users[]
  columns_boards columns_boards[]
}

model boards_users {
  id       Int    @id(map: "PK_boards_users")
  board_id Int
  user_id  String @db.VarChar(36)
  boards   boards @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_boards_users_board_id")
  users    users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_boards_users_user_id")
}

model columns {
  id             Int              @id(map: "PK_columns")
  title          String           @db.VarChar(100)
  columns_boards columns_boards[]
  columns_tasks  columns_tasks[]
}

model columns_boards {
  id        Int     @id(map: "PK_columns_boards")
  board_id  Int
  column_id Int
  boards    boards  @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_columns_boards_board_id")
  columns   columns @relation(fields: [column_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_columns_boards_column_id")
}

model columns_tasks {
  id        Int     @id(map: "PK_columns_tasks")
  task_id   Int
  column_id Int
  columns   columns @relation(fields: [column_id], references: [id], onDelete: Cascade, map: "fk_columns_tasks_column_id")
  tasks     tasks   @relation(fields: [task_id], references: [id], onDelete: Cascade, map: "fk_columns_tasks_task_id")
}

model states {
  id    Int     @id(map: "PK_states")
  state String  @db.VarChar(100)
  color String? @db.VarChar(50)
  tasks tasks[]
}

model tasks {
  id            Int             @id(map: "PK_tasks")
  content       String          @db.VarChar(255)
  state_id      Int
  columns_tasks columns_tasks[]
  states        states          @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_tasks_states")
}

model users {
  id              String         @id(map: "PK_users") @db.VarChar(36)
  name            String         @db.VarChar(100)
  email           String         @unique(map: "email") @db.VarChar(100)
  profile_picture String?        @db.VarChar(100)
  password        String         @db.VarChar(255)
  boards          boards[]
  boards_users    boards_users[]
}
